<launch>
  <arg name="os_windows_arg" value="$(eval 'false' if not optenv('OS', 'unknown').lower().startswith('windows') else 'true')" />

  <node pkg="ros_msft_onnx" type="ros_msft_onnx_node" name="ros_msft_onnx" output="screen">
    <param name="image_topic" value="$(eval '/camera/image_raw' if os_windows_arg else '/cv_camera/image_raw')"/>
     <param name="tensor_width" value="416"/>
     <param name="tensor_height" value="416"/>
  </node>
  
  <!-- The camera node will be selected based on os. ros_msft_camera for Windows and cv_camera for others. -->
  <group if="$(arg os_windows_arg)" >
    <!-- NOTE: The image properties need to be valid for the camera, or the node will auto select the closest values -->
    <node pkg="ros_msft_camera" type="ros_msft_camera_node" name="camera">
      <param name="camera_info_url" value="file://$(find ros_msft_camera)/config/default_calibration.yaml" />
      <param name="frame_id" value="camera" />
      <param name="image_width" value="1280" />
      <param name="image_height" value="720" />
      <param name="frame_rate" value="30.0" />
    </node>
  </group>

  <group unless="$(arg os_windows_arg)" >
    <!-- NOTE: The image properties need to be valid for the camera, or the node will auto select the closest values -->
    <node pkg="cv_camera" type="cv_camera_node" name="cv_camera" output="screen">
      <param name="rate" type="double" value="5.0"/>
      <param name="image_width" type="double" value="640"/>
      <param name="image_height" type="double" value="480"/>
    </node>
  </group>
  
  <node pkg="tf" type="static_transform_publisher" name="onnx_link"
    args="0 -0.02  0 0 0 0 map base_link 100" />  

</launch>